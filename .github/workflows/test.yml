name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Install flake8 for linting
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking with mypy
      run: |
        pip install mypy
        # Type check main modules (ignore test files for now due to fixtures)
        mypy iron_chef_database_secure.py recipe_generator.py recipe_exporter_secure.py --ignore-missing-imports || true
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short -m "unit and not slow"
    
    - name: Run integration tests
      run: |
        pytest tests/ -v --tb=short -m "integration and not slow"
    
    - name: Run security tests
      run: |
        pytest tests/ -v --tb=short -m "security and not slow"
    
    - name: Run all tests with coverage
      run: |
        pytest tests/ --cov --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-slow:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run slow tests
      run: |
        pytest tests/ -v --tb=short -m "slow" --maxfail=5

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test-database-integrity:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test database schema integrity
      run: |
        python -c "
        from iron_chef_database_secure import IronChefDatabaseSecure
        import tempfile
        import os
        
        # Test database creation and schema
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
            db_path = tmp.name
        
        try:
            with IronChefDatabaseSecure(db_path) as db:
                db.initialize_database()
                
                # Verify all tables exist
                db.cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")
                tables = [row[0] for row in db.cursor.fetchall()]
                expected_tables = ['iron_chefs', 'competitors', 'episodes', 'dishes', 'recipes', 'ingredients', 'dish_ingredients']
                
                for table in expected_tables:
                    assert table in tables, f'Missing table: {table}'
                
                print('✓ Database schema integrity verified')
        finally:
            if os.path.exists(db_path):
                os.unlink(db_path)
        "
    
    - name: Test foreign key constraints
      run: |
        python -c "
        from iron_chef_database_secure import IronChefDatabaseSecure
        import tempfile
        import os
        import sqlite3
        
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
            db_path = tmp.name
        
        try:
            with IronChefDatabaseSecure(db_path) as db:
                db.initialize_database()
                
                # Test foreign key constraint enforcement
                try:
                    db.add_episode(1, 'Test Theme', 99999, 99999)  # Non-existent IDs
                    assert False, 'Foreign key constraint not enforced'
                except sqlite3.IntegrityError:
                    print('✓ Foreign key constraints working correctly')
        finally:
            if os.path.exists(db_path):
                os.unlink(db_path)
        "

  performance-benchmark:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        pytest tests/ -v -m "not slow" --benchmark-only --benchmark-json=benchmark.json || true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json

  test-different-os:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run cross-platform tests
      run: |
        pytest tests/ -v -m "unit and not slow" --tb=short